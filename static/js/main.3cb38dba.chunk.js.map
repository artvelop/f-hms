{"version":3,"sources":["Container/icon/valknut.svg","Component/msg/MessageDialog.js","asset/solList.js","Container/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MessageDialog","this","props","classes","open","onClose","content","Dialog","aria-labelledby","aria-describedby","fullWidth","DialogContent","DialogContentText","className","textStyle","id","Button","buttonStyle","onClick","variant","autoFocus","Component","withStyles","textAlign","imgStyle","width","height","marginTop","marginLeft","margin","data","Layout","state","expanded","msg","dialogState","closeMsgDialog","setState","openDialog","index","Math","floor","random","solList","length","handleExpandClick","Container","maxWidth","Card","CardHeader","avatar","Avatar","aria-label","action","IconButton","title","subheader","CardMedia","image","valknut","Google","client","slot","style","display","layout","format","CardActions","aria-expanded","theme","cardStyle","media","paddingTop","expand","transform","transition","transitions","create","duration","shortest","expandOpen","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,qC,4UCmBrCC,E,iLACM,IAAD,EACqCC,KAAKC,MAAzCC,EADD,EACCA,QAASC,EADV,EACUA,KAAMC,EADhB,EACgBA,QAASC,EADzB,EACyBA,QAEhC,OACE,kBAACC,EAAA,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTG,kBAAgB,qBAChBC,mBAAiB,2BACjBC,WAAS,GAET,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWV,EAAQW,UACnBC,GAAG,4BACFT,IAGL,kBAACU,EAAA,EAAD,CACEH,UAAWV,EAAQc,YACnBC,QAASb,EACTc,QAAQ,WACRC,WAAS,GAJX,qB,GAnBoBC,aA+BbC,cA9CA,iBAAO,CACpBR,UAAW,CACTS,UAAU,UAEZC,SAAU,CACRC,MAAM,OACNC,OAAO,OACPC,UAAU,OACVC,WAAW,QAEbX,YAAa,CACXY,OAAQ,UAmCGP,CAAmBtB,GClDnB,GACb8B,KAAM,CACJ,qFACA,oFACA,4FACA,8GACA,yHACA,uEACA,gFC6BEC,E,2MAEJC,MAAQ,CACNC,UAAU,EACVC,IAAK,CACHC,aAAa,EACb7B,QAAS,U,EAIb8B,eAAiB,WACf,EAAKC,SAAS,CACZH,IAAK,CACHC,aAAa,EACb7B,QAAS,O,EAKfgC,WAAa,WAEX,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWC,EAAQb,KAAKc,QAEtD,EAAKP,SAAS,CACZH,IAAK,CACHC,aAAa,EACb7B,QAASqC,EAAQb,KAAKS,O,EAK5BM,kBAAoB,WAClB,EAAKR,SAAS,CACZJ,UAAW,EAAKD,MAAMC,Y,wEAIhB,IAEA9B,EAAYF,KAAKC,MAAjBC,QAER,OACE,kBAAC2C,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,OACE,kBAACC,EAAA,EAAD,CAAQC,aAAW,UAAnB,KAIFC,OACE,kBAACC,EAAA,EAAD,CAAYF,aAAW,mBACrB,kBAAC,IAAD,OAGJG,MAAM,uEACNC,UAAU,eAEZ,kBAACC,EAAA,EAAD,CACE5C,UAAU,KACV6C,MAAOC,MAET,kBAAC,IAAQC,OAAT,CACEC,OAAO,0BACPC,KAAK,aACLC,MAAO,CAAEC,QAAS,SAClBC,OAAO,aACPC,OAAO,UAET,kBAACC,EAAA,EAAD,KACE,kBAACnD,EAAA,EAAD,CACEH,UAAWV,EAAQc,YACnBE,QAAQ,WACRD,QAASjB,KAAKqC,WACd8B,gBAAenE,KAAK+B,MAAMC,SAC1BvB,WAAS,GALX,mDAWJ,kBAAC,EAAD,CACEN,KAAMH,KAAK+B,MAAME,IAAIC,YACrB9B,QAASJ,KAAKmC,eACd9B,QAASL,KAAK+B,MAAME,IAAI5B,e,GApFbe,aA2FNC,cArHA,SAAC+C,GAAD,MAAY,CACzBC,UAAW,CACT3C,UAAW,SAEb4C,MAAO,CACL7C,OAAQ,EACR8C,WAAY,UAEdC,OAAQ,CACNC,UAAW,eACX9C,WAAY,OACZ+C,WAAYN,EAAMO,YAAYC,OAAO,YAAa,CAChDC,SAAUT,EAAMO,YAAYE,SAASC,YAGzCC,WAAY,CACVN,UAAW,kBAEbxB,OAAQ,CACN+B,gBAAiB,WAEnBhE,YAAa,CACXY,OAAQ,UA+FGP,CAAmBS,GCpHnBmD,MARf,WACE,OACE,yBAAKrE,UAAU,OACb,kBAAC,EAAD,QCKcsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3cb38dba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/valknut.27a21bcf.svg\";","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Dialog, DialogContent, Button, DialogContentText } from '@material-ui/core';\n\nconst styles = () => ({\n  textStyle: {\n    textAlign:\"center\",\n  },\n  imgStyle: {\n    width:'40px',\n    height:'40px',\n    marginTop:'20px',\n    marginLeft:'20px',\n  },\n  buttonStyle: {\n    margin: '10px',\n  },\n});\n\nclass MessageDialog extends Component {\n  render() {\n    const { classes, open, onClose, content } = this.props;\n\n    return (\n      <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n        fullWidth\n      >\n        <DialogContent>\n          <DialogContentText\n            className={classes.textStyle}\n            id=\"alert-dialog-description\">\n            {content}\n          </DialogContentText>\n        </DialogContent>\n        <Button\n          className={classes.buttonStyle}\n          onClick={onClose}\n          variant=\"outlined\"\n          autoFocus>\n          확인\n        </Button>\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(MessageDialog);\n","export default {\n  data: [\n    '한번 나무가 아닌 숲을 봐보세요',\n    '냉정한 결정이 가장 중요합니다',\n    '주변 상황은 잘 살피고 있는건가요?',\n    '최선을 다하세요 방향을 바꿀 수 있습니다',\n    '시작하세요 어차피 인생은 위험의 연속입니다',\n    '상황은 계속해서 바뀝니다',\n    '주변에는 크게 알리진 마세요',\n  ]\n}","import React, { Component } from 'react';\nimport AdSense from 'react-adsense';\nimport Container from '@material-ui/core/Container';\nimport { Card, CardHeader, Avatar, IconButton, Button, CardMedia, CardActions } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport valknut from './icon/valknut.svg';\nimport '../App.css';\nimport MessageDialog from '../Component/msg/MessageDialog';\nimport solList from '../asset/solList';\n\nconst styles = (theme) => ({\n  cardStyle: {\n    marginTop: '200px',\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: \"#BE80FF\",\n  },\n  buttonStyle: {\n    margin: '10px',\n  },\n});\n\nclass Layout extends Component {\n\n  state = {\n    expanded: false,\n    msg: {\n      dialogState: false,\n      content: 'hello',\n    }\n  };\n\n  closeMsgDialog = () => {\n    this.setState({\n      msg: {\n        dialogState: false,\n        content: ''\n      }\n    });\n  }\n\n  openDialog = () => {\n\n    const index = Math.floor(Math.random() * solList.data.length);\n\n    this.setState({\n      msg: {\n        dialogState: true,\n        content: solList.data[index],\n      }\n    })\n  }\n\n  handleExpandClick = () => {\n    this.setState({\n      expanded: !this.state.expanded,\n    });\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    return (\n      <Container maxWidth=\"sm\">\n        <Card>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\">\n                R\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"I will help you\">\n                <MoreVertIcon/>\n              </IconButton>\n            }\n            title=\"현재 고민을 생각해주세요\"\n            subheader=\"1000.01.01\"\n          />\n          <CardMedia\n            className=\"jb\"\n            image={valknut}\n          />\n          <AdSense.Google\n            client='ca-pub-2620265297834591'\n            slot='7806394673'\n            style={{ display: 'block' }}\n            layout='in-article'\n            format='fluid'\n          />\n          <CardActions>\n            <Button\n              className={classes.buttonStyle}\n              variant=\"outlined\"\n              onClick={this.openDialog}\n              aria-expanded={this.state.expanded}\n              fullWidth\n            >\n              도와줘요 솔로몬!!\n            </Button>\n          </CardActions>\n        </Card>\n        <MessageDialog\n          open={this.state.msg.dialogState}\n          onClose={this.closeMsgDialog}\n          content={this.state.msg.content}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default withStyles(styles)(Layout);","import React from 'react';\nimport './App.css';\nimport Layout from './Container/Layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}