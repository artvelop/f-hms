{"version":3,"sources":["Container/icon/valknut.svg","Component/msg/MessageDialog.js","asset/solList.js","Container/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MessageDialog","this","props","classes","open","onClose","content","Dialog","aria-labelledby","aria-describedby","fullWidth","DialogContent","DialogContentText","className","textStyle","id","Button","buttonStyle","onClick","variant","autoFocus","Component","withStyles","textAlign","imgStyle","width","height","marginTop","marginLeft","margin","data","Layout","state","expanded","msg","dialogState","closeMsgDialog","setState","openDialog","index","Math","floor","random","solList","length","handleExpandClick","Container","maxWidth","Card","CardHeader","avatar","Avatar","aria-label","action","IconButton","title","subheader","CardMedia","image","valknut","CardActions","aria-expanded","theme","cardStyle","media","paddingTop","expand","transform","transition","transitions","create","duration","shortest","expandOpen","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,qC,2TCmBrCC,E,iLACM,IAAD,EACqCC,KAAKC,MAAzCC,EADD,EACCA,QAASC,EADV,EACUA,KAAMC,EADhB,EACgBA,QAASC,EADzB,EACyBA,QAEhC,OACE,kBAACC,EAAA,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTG,kBAAgB,qBAChBC,mBAAiB,2BACjBC,WAAS,GAET,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWV,EAAQW,UACnBC,GAAG,4BACFT,IAGL,kBAACU,EAAA,EAAD,CACEH,UAAWV,EAAQc,YACnBC,QAASb,EACTc,QAAQ,WACRC,WAAS,GAJX,qB,GAnBoBC,aA+BbC,cA9CA,iBAAO,CACpBR,UAAW,CACTS,UAAU,UAEZC,SAAU,CACRC,MAAM,OACNC,OAAO,OACPC,UAAU,OACVC,WAAW,QAEbX,YAAa,CACXY,OAAQ,UAmCGP,CAAmBtB,GClDnB,GACb8B,KAAM,CACJ,2DACA,6IACA,8EACA,kGACA,8GACA,sFACA,2FACA,kEACA,0FACA,iEACA,wCACA,2DACA,iGACA,8EACA,2DACA,wEACA,qHACA,4DACA,+GACA,kEACA,qHACA,oDACA,0DACA,sDACA,qDACA,oFACA,8EACA,8EACA,oHACA,wEACA,+EACA,wCACA,oDACA,wCACA,uEACA,8EACA,oDACA,wGACA,iGACA,yEACA,uEACA,2DACA,iEACA,4IACA,8EACA,uEACA,4FACA,0HACA,mFACA,yEACA,wGACA,4IACA,iCACA,iEACA,mHACA,2DACA,8EACA,sEACA,2DACA,kGACA,iGACA,+EACA,8DC3BEC,E,2MAEJC,MAAQ,CACNC,UAAU,EACVC,IAAK,CACHC,aAAa,EACb7B,QAAS,U,EAIb8B,eAAiB,WACf,EAAKC,SAAS,CACZH,IAAK,CACHC,aAAa,EACb7B,QAAS,O,EAKfgC,WAAa,WAEX,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWC,EAAQb,KAAKc,QAEtD,EAAKP,SAAS,CACZH,IAAK,CACHC,aAAa,EACb7B,QAASqC,EAAQb,KAAKS,O,EAK5BM,kBAAoB,WAClB,EAAKR,SAAS,CACZJ,UAAW,EAAKD,MAAMC,Y,wEAIhB,IAEA9B,EAAYF,KAAKC,MAAjBC,QAER,OACE,kBAAC2C,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,OACE,kBAACC,EAAA,EAAD,CAAQC,aAAW,UAAnB,KAIFC,OACE,kBAACC,EAAA,EAAD,CAAYF,aAAW,mBACrB,kBAAC,IAAD,OAGJG,MAAM,uEACNC,UAAU,eAEZ,kBAACC,EAAA,EAAD,CACE5C,UAAU,KACV6C,MAAOC,MAST,kBAACC,EAAA,EAAD,KACE,kBAAC5C,EAAA,EAAD,CACEH,UAAWV,EAAQc,YACnBE,QAAQ,WACRD,QAASjB,KAAKqC,WACduB,gBAAe5D,KAAK+B,MAAMC,SAC1BvB,WAAS,GALX,mDAWJ,kBAAC,EAAD,CACEN,KAAMH,KAAK+B,MAAME,IAAIC,YACrB9B,QAASJ,KAAKmC,eACd9B,QAASL,KAAK+B,MAAME,IAAI5B,e,GApFbe,aA2FNC,cArHA,SAACwC,GAAD,MAAY,CACzBC,UAAW,CACTpC,UAAW,SAEbqC,MAAO,CACLtC,OAAQ,EACRuC,WAAY,UAEdC,OAAQ,CACNC,UAAW,eACXvC,WAAY,OACZwC,WAAYN,EAAMO,YAAYC,OAAO,YAAa,CAChDC,SAAUT,EAAMO,YAAYE,SAASC,YAGzCC,WAAY,CACVN,UAAW,kBAEbjB,OAAQ,CACNwB,gBAAiB,WAEnBzD,YAAa,CACXY,OAAQ,UA+FGP,CAAmBS,GCpHnB4C,MARf,WACE,OACE,yBAAK9D,UAAU,OACb,kBAAC,EAAD,QCKc+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.88a0a5ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/valknut.27a21bcf.svg\";","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Dialog, DialogContent, Button, DialogContentText } from '@material-ui/core';\n\nconst styles = () => ({\n  textStyle: {\n    textAlign:\"center\",\n  },\n  imgStyle: {\n    width:'40px',\n    height:'40px',\n    marginTop:'20px',\n    marginLeft:'20px',\n  },\n  buttonStyle: {\n    margin: '10px',\n  },\n});\n\nclass MessageDialog extends Component {\n  render() {\n    const { classes, open, onClose, content } = this.props;\n\n    return (\n      <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n        fullWidth\n      >\n        <DialogContent>\n          <DialogContentText\n            className={classes.textStyle}\n            id=\"alert-dialog-description\">\n            {content}\n          </DialogContentText>\n        </DialogContent>\n        <Button\n          className={classes.buttonStyle}\n          onClick={onClose}\n          variant=\"outlined\"\n          autoFocus>\n          확인\n        </Button>\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(MessageDialog);\n","export default {\n  data: [\n    '계속 참으면 호구된다',\n    '실패를 걱정하지 말고 목표를 향해 부지런히 도전하라',\n    '새로운 길을 생각해 보았는가',\n    '먹이가 있는 곳엔 틀림없이 적이 있다',\n    '기회를 소중히 여겨라 기회는 한 번뿐이다',\n    '할 수 밖에 없는 이유를 점검하라',\n    '상상하지 못한 것을 보게될 것이다',\n    '늘 반대하는 사람은 있다',\n    '시작하라 인생은 위험의 연속이다',\n    '지나친 참견을 삼가한다',\n    '충분하지 않다',\n    '목적없는 행동은 없다',\n    '고민은 하더라도 걱정은 안해도 된다',\n    '마음을 비우고 일단 시작해라',\n    '주변의 도움을 받아라',\n    '최선의 결과는 아닐 것이다',\n    '당신을 보는 주위의 시선을 바꿀 필요가 있다',\n    '크게 보고 길게 보아라',\n    '한 번의 기회가 찾아온다 그 기회를 잡아라',\n    '아직은 꿈도 꾸지 말아라',\n    '검색을 생활화하라 정답을 쉽게 찾을 수 있다',\n    '분명하게 행동하라',\n    '가족과 상의해보아라',\n    '충분히 즐길 수 있다',\n    '혼란에 빠지게 된다',\n    '무조건적인 진행이 일을 망친다',\n    '모든 것은 당신에게 달려있다',\n    '최선의 길을 가는중은 아니다',\n    '생각하지 못한 이면이 보이기 시작할 것이다',\n    '곧 중요한 기회가 찾아온다',\n    '여러번 시도해 볼 필요가 있다',\n    '평소에 잘해라',\n    '침착하게 결정하라',\n    '때를 기다려라',\n    '올해안에 기회가 찾아온다',\n    '어떻게 되든 즐거움을 찾아라',\n    '원인을 살펴보아라',\n    '하고 싶다면 행하라 한 번뿐인 인생이다',\n    '이기적인 선택이 가끔은 도움이 된다',\n    '무리는 하지 않는 것이 좋다',\n    '준비가 되었으면 시작하라',\n    '그럴만한 가치가 있다',\n    '계획을 꼼꼼하게 세워라',\n    '따뜻한 욕조에서 한번 마음을 추스리고 생각해보아라',\n    '새로운 길을 생각해 보았는가',\n    '침착하고 신속하게 행하라',\n    '최선을 다하라 방향을 바꿀 수 있다',\n    '한 가지에만 노력해서는 해결되지 않을 것이다',\n    '주변사람들에게 조언을 들어라',\n    '생각을 바꿀 수 있을 것이다',\n    '공포를 느껴라, 그리고 그래도 도전하라',\n    '방황과 변화를 사랑한다는 것은 살아있다는 증거이다',\n    '긍정적이다',\n    '인생은 지르고 보는거다',\n    '어떻게라는 세글자를 바꿔야 상황이 변한다',\n    '때로는 포기가 답이다',\n    '하나 하나 확실히 마무리하라',\n    '객관적으로 생각해보아라',\n    '즐기는 마음을 가져라',\n    '늦었다고 생각할 때가 제일 늦을 때다',\n    '주변에 이야기하는 것도 도움이 된다',\n    '나무를 보지 말고 숲을 보아라',\n    '너무 세게 나가고 있다'\n  ]\n}","import React, { Component } from 'react';\n//import AdSense from 'react-adsense';\nimport Container from '@material-ui/core/Container';\nimport { Card, CardHeader, Avatar, IconButton, Button, CardMedia, CardActions } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport valknut from './icon/valknut.svg';\nimport '../App.css';\nimport MessageDialog from '../Component/msg/MessageDialog';\nimport solList from '../asset/solList';\n\nconst styles = (theme) => ({\n  cardStyle: {\n    marginTop: '200px',\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: \"#BE80FF\",\n  },\n  buttonStyle: {\n    margin: '10px',\n  },\n});\n\nclass Layout extends Component {\n\n  state = {\n    expanded: false,\n    msg: {\n      dialogState: false,\n      content: 'hello',\n    }\n  };\n\n  closeMsgDialog = () => {\n    this.setState({\n      msg: {\n        dialogState: false,\n        content: ''\n      }\n    });\n  }\n\n  openDialog = () => {\n\n    const index = Math.floor(Math.random() * solList.data.length);\n\n    this.setState({\n      msg: {\n        dialogState: true,\n        content: solList.data[index],\n      }\n    })\n  }\n\n  handleExpandClick = () => {\n    this.setState({\n      expanded: !this.state.expanded,\n    });\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    return (\n      <Container maxWidth=\"sm\">\n        <Card>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\">\n                R\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"I will help you\">\n                <MoreVertIcon/>\n              </IconButton>\n            }\n            title=\"현재 고민을 생각해주세요\"\n            subheader=\"1000.01.01\"\n          />\n          <CardMedia\n            className=\"jb\"\n            image={valknut}\n          />\n          {/* <AdSense.Google\n            client='ca-pub-2620265297834591'\n            slot='7806394673'\n            style={{ display: 'block' }}\n            layout='in-article'\n            format='fluid'\n          /> */}\n          <CardActions>\n            <Button\n              className={classes.buttonStyle}\n              variant=\"outlined\"\n              onClick={this.openDialog}\n              aria-expanded={this.state.expanded}\n              fullWidth\n            >\n              도와줘요 솔로몬!!\n            </Button>\n          </CardActions>\n        </Card>\n        <MessageDialog\n          open={this.state.msg.dialogState}\n          onClose={this.closeMsgDialog}\n          content={this.state.msg.content}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default withStyles(styles)(Layout);","import React from 'react';\nimport './App.css';\nimport Layout from './Container/Layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}